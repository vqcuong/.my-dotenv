return {}

-- return {

--   {
--     "hrsh7th/nvim-cmp",
--     lazy = false,
--     dependencies = {
--       "hrsh7th/cmp-nvim-lsp",
--       "hrsh7th/cmp-buffer",
--       "hrsh7th/cmp-path",
--       "hrsh7th/cmp-cmdline",
--       "hrsh7th/cmp-emoji",
--       "saadparwaiz1/cmp_luasnip",
--       "onsails/lspkind.nvim",
--     },
--     init = function()
--       vim.opt.pumheight = 20
--     end,
--     keys = {
--       {
--         "<tab>",
--         function()
--           return require("luasnip").jumpable(1) and "<Plug>luasnip-jump-next" or "<tab>"
--         end,
--         expr = true,
--         silent = true,
--         mode = "i",
--       },
--       {
--         "<tab>",
--         function()
--           require("luasnip").jump(1)
--         end,
--         mode = "s",
--       },
--       {
--         "<s-tab>",
--         function()
--           require("luasnip").jump(-1)
--         end,
--         mode = { "i", "s" },
--       },
--     },
--     -- stylua: ignore
--     opts = function() return {} end,
--     config = function()
--       local cmp = require("cmp")
--       local auto_select = true
--       local defaults = require("cmp.config.default")()
--       local luasnip = require("luasnip")
--       local lspkind = require("lspkind")
--
--       local has_words_before = function()
--         unpack = unpack or table.unpack
--         local line, col = unpack(vim.api.nvim_win_get_cursor(0))
--         return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match("%s") == nil
--       end
--
--       cmp.setup({
--         auto_brackets = { "python" },
--         completion = {
--           completeopt = "menu,menuone,noinsert" .. (auto_select and "" or ",noselect"),
--         },
--         preselect = auto_select and cmp.PreselectMode.Item or cmp.PreselectMode.None,
--         -- snippet = {
--         --   expand = function(args)
--         --     luasnip.lsp_expand(args.body)
--         --   end,
--         -- },
--         experimental = {
--           ghost_text = {
--             hl_group = "CmpGhostText",
--           },
--         },
--         mapping = cmp.mapping.preset.insert({
--           ["<c-n>"] = cmp.mapping.select_next_item({ behavior = cmp.SelectBehavior.Insert }),
--           ["<c-p>"] = cmp.mapping.select_prev_item({ behavior = cmp.SelectBehavior.Insert }),
--           ["<c-b>"] = cmp.mapping.scroll_docs(-4),
--           ["<c-f>"] = cmp.mapping.scroll_docs(4),
--           ["<c-space>"] = cmp.mapping.complete(),
--           ["<c-e>"] = cmp.mapping.close(),
--           ["<cr>"] = LazyVim.cmp.confirm({ select = auto_select }),
--           ["<c-cr>"] = function(fallback)
--             cmp.abort()
--             fallback()
--           end,
--           ["<Tab>"] = cmp.mapping(function(fallback)
--             if cmp.visible() then
--               cmp.select_next_item()
--             -- You could replace the expand_or_jumpable() calls with expand_or_locally_jumpable()
--             -- this way you will only jump inside the snippet region
--             elseif luasnip.expand_or_jumpable() then
--               luasnip.expand_or_jump()
--             elseif has_words_before() then
--               cmp.complete()
--             else
--               fallback()
--             end
--           end, { "i", "s" }),
--           ["<S-Tab>"] = cmp.mapping(function(fallback)
--             if cmp.visible() then
--               cmp.select_prev_item()
--             elseif luasnip.jumpable(-1) then
--               luasnip.jump(-1)
--             else
--               fallback()
--             end
--           end, { "i", "s" }),
--         }),
--         sources = cmp.config.sources({}, {
--           { name = "nvim_lsp" },
--           { name = "luasnip" },
--           { name = "path" },
--           { name = "emoji" },
--           { name = "codeium" },
--         }, {
--           { name = "buffer" },
--         }, {
--           { name = "lazydev", group_index = 0 },
--         }, {}),
--         window = {
--           -- completion = cmp.config.window.bordered({
--           --   leading_offset = 0,
--           --   col_offset = -3,
--           --   side_padding = 0,
--           -- }),
--           documentation = cmp.config.window.bordered({
--             col_offset = -3,
--           }),
--         },
--         formatting = {
--           fields = { "kind", "abbr", "menu" },
--           format = lspkind.cmp_format({
--             mode = "symbol_text",
--             maxwidth = 50,
--             symbol_map = {
--               Codeium = "ÔÉê",
--             },
--             before = function(entry, vim_item)
--               vim_item.menu = "[" .. vim_item.kind .. "]"
--               vim_item.dup = ({
--                 nvim_lsp = 0,
--                 path = 0,
--               })[entry.source.name] or 0
--               vim_item.kind = lspkind.symbolic(vim_item.kind) or vim_item.kind
--               return vim_item
--             end,
--           }),
--         },
--         sorting = defaults.sorting,
--       })
--
--       local cmdline_mapping = {
--         ["<Up>"] = cmp.mapping({
--           c = function(fallback)
--             if cmp.visible() then
--               return cmp.select_prev_item()
--             end
--             fallback()
--           end,
--         }),
--         ["<Down>"] = cmp.mapping({
--           c = function(fallback)
--             if cmp.visible() then
--               return cmp.select_next_item()
--             end
--             fallback()
--           end,
--         }),
--         ["<Tab>"] = cmp.mapping({
--           c = function()
--             if cmp.visible() then
--               return cmp.select_next_item()
--             else
--               cmp.complete()
--               cmp.select_next_item()
--               return
--             end
--           end,
--         }),
--         ["<S-Tab>"] = cmp.mapping({
--           c = function()
--             if cmp.visible() then
--               return cmp.select_prev_item()
--             else
--               cmp.complete()
--               cmp.select_next_item()
--               return
--             end
--           end,
--         }),
--       }
--
--       cmp.setup.cmdline({ "/", "?" }, {
--         mapping = cmp.mapping.preset.cmdline(cmdline_mapping),
--         sources = { { name = "buffer" } },
--         formatting = {
--           fields = { "abbr", "kind" },
--           format = lspkind.cmp_format({
--             mode = "symbol_text",
--             maxwidth = 50,
--             before = function(_, vim_item)
--               if vim_item.kind == "Text" then
--                 -- vim_item.kind = "Ôê¢"
--                 vim_item.kind = "üîç"
--                 return vim_item
--               end
--               vim_item.kind = lspkind.symbolic(vim_item.kind) and lspkind.symbolic(vim_item.kind) or vim_item.kind
--               return vim_item
--             end,
--           }),
--         },
--       })
--
--       cmp.setup.cmdline(":", {
--         completion = { autocomplete = false },
--         mapping = cmp.mapping.preset.cmdline(cmdline_mapping),
--         sources = {
--           { name = "path" },
--           { name = "cmdline", option = { ignore_cmds = { "Man", "!" } } },
--         },
--         formatting = {
--           fields = { "abbr", "kind" },
--           format = lspkind.cmp_format({
--             mode = "symbol_text",
--             maxwidth = 50,
--             before = function(_, vim_item)
--               if vim_item.kind == "Variable" then
--                 vim_item.kind = "ÓØá"
--                 return vim_item
--               end
--               vim_item.kind = lspkind.symbolic(vim_item.kind) and lspkind.symbolic(vim_item.kind) or vim_item.kind
--               return vim_item
--             end,
--           }),
--         },
--       })
--
--       vim.cmd([[
--         highlight! default link CmpItemKind CmpItemMenuDefault
--       ]])
--     end,
--   },
-- }
